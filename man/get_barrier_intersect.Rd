% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{get_barrier_intersect}
\alias{get_barrier_intersect}
\title{Get distance between points taking into account barriers}
\usage{
get_barrier_intersect(
  node_long,
  node_lat,
  barrier_list = list(),
  barrier_penalty = numeric(),
  barrier_method = 1,
  max_barrier_range = Inf,
  eccentricity = 0.9,
  n_ell = 20
)
}
\arguments{
\item{node_long}{longitudes of nodes.}

\item{node_lat}{latitudes of nodes.}

\item{barrier_list}{list of polygons representing barriers. Each element of
the list must be a dataframe with columns \code{long} and \code{lat}
specifying the coordinates of points that make up the polygon. Polygons
must be complete rings, meaning the final row of the dataframe must equal
the first row.}

\item{barrier_penalty}{penalty values of each barrier. If a single value is
provided then this value will be used for all barriers.}

\item{barrier_method}{the method by which penalties are applied:
\enumerate{
  \item{compare pairwise lines to barriers. If the line intersects then add
  a fixed \code{barrier_penalty} to the spatial distance.}
  \item{compare pairwise lines to barriers. Calculate the intersection of
  the two, multiply this by the \code{barrier_penalty} and add to the
  spatial distance. For example, a \code{barrier_penalty} of 1 would mean
  there is double the "friction" when moving through a barrier.}
  \item{compare pairwise ellipses to barriers. Calculate the intersection
  area of the two, multiply this by the \code{barrier_penalty} and add to
  the spatial distance.}
}}

\item{max_barrier_range}{edges that are longer than this distance are
unaffected by any barriers. Makes it possible to model barriers that only
apply locally.}

\item{eccentricity}{eccentricity of ellipses (only used under
\code{barrier_method = 3}).}

\item{n_ell}{number of points that make up an ellipse (only used under
\code{barrier_method = 3}).}
}
\description{
Given a set of lat/lon coordinates and a list of barriers in the
  form of polygons, returns the "distance" between points where distance is
  equal to the great-circle distance with a penalty applied if the line
  intersects a barrier. The exact way in which barriers modify distances can
  be varied (see \code{barrier_method} argument).
}
